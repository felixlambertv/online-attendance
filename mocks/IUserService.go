// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/felixlambertv/online-attendance/model/entity"
	mock "github.com/stretchr/testify/mock"

	request "github.com/felixlambertv/online-attendance/model/request"
)

// IUserService is an autogenerated mock type for the IUserService type
type IUserService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: userId
func (_m *IUserService) Delete(userId uint) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUser provides a mock function with given fields: userId
func (_m *IUserService) FindUser(userId uint) (entity.User, error) {
	ret := _m.Called(userId)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(uint) entity.User); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0
func (_m *IUserService) Register(_a0 request.UserRequest) (entity.User, error) {
	ret := _m.Called(_a0)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(request.UserRequest) entity.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.UserRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userId, _a1
func (_m *IUserService) Update(userId uint, _a1 request.UserRequest) (entity.User, error) {
	ret := _m.Called(userId, _a1)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(uint, request.UserRequest) entity.User); ok {
		r0 = rf(userId, _a1)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, request.UserRequest) error); ok {
		r1 = rf(userId, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserService creates a new instance of IUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserService(t mockConstructorTestingTNewIUserService) *IUserService {
	mock := &IUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
